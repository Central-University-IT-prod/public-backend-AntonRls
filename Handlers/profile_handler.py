from telebot import TeleBot, types
from telebot.types import CallbackQuery, Message

import utils
from DB import db_user, db_user_full_info, db_places
from Keyboards import create_cancel_keyboard
from Controllers import profile_controller
from OSM import osm_manager


class profile_handle:
    def __init__(self, bot: TeleBot):
        self.bot = bot

    def handle(self, data, id, call: CallbackQuery):
        name = data.split('`')[0]

        if name == 'editage':
            self.bot.clear_step_handler_by_chat_id(id)
            msg = self.bot.send_message(id, "‚úèÔ∏è –ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç", reply_markup=create_cancel_keyboard("profile"))
            self.bot.register_next_step_handler(msg, self.update_age)
        elif name == 'editplace':
            self.bot.clear_step_handler_by_chat_id(id)
            msg = self.bot.send_message(id, "‚úèÔ∏è –ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –°—Ç—Ä–∞–Ω–∞, –ì–æ—Ä–æ–¥\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –†–æ—Å—Å–∏—è, –ú–æ—Å–∫–≤–∞",
                                        reply_markup=create_cancel_keyboard("profile"))
            self.bot.register_next_step_handler(msg, self.update_place)
        elif name == 'editgender':
            self.bot.clear_step_handler_by_chat_id(id)

            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(types.InlineKeyboardButton(text='üöπ –ú—É–∂—Å–∫–æ–π', callback_data=f'profile_updategender`1'),
                              types.InlineKeyboardButton(text='üö∫ –ñ–µ–Ω—Å–∫–∏–π', callback_data=f'profile_updategender`2'))
            markup_inline.add(types.InlineKeyboardButton(text='üî∂ –ù–µ —É–∫–∞–∑–∞–Ω', callback_data=f'profile_updategender`3'))
            markup_inline.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data=f'profile_showprofile'))

            self.bot.edit_message_text("‚úèÔ∏è –í—ã–±—Ä–∞—Ç—å –ø–æ–ª", id, call.message.message_id,
                                       reply_markup=markup_inline)
        elif name == 'updategender':
            number_gender = int(data.split('`')[1])
            db_user_full_info.update_param(call.from_user.id, 'gender', number_gender, False)
            self.handle('showprofile', id, call)
        elif name == 'showprofile':
            profile_controller.send_profile_info(id, self.bot, call.message.message_id)
        elif name == 'editinterests':
            interests = ['—Ä—ã–±–∞–ª–∫–∞', '–æ—Ö–æ—Ç–∞', '—Ç—É—Ä–∏–∑–º', 'IT', '–Ω–∞—É–∫–∞', '—Ñ–∏–ª—å–º—ã', '—á—Ç–µ–Ω–∏–µ', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '—Å–ø–æ—Ä—Ç',
                         '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏']
            interests_user_text = db_user_full_info.get_param(id, 'interests')
            interests_user = []
            if interests_user_text is not None:
                interests_user = interests_user_text.split(',')
            for i in range(len(interests_user)):
                interests_user[i] = interests_user[i].strip()
            markup_inline = types.InlineKeyboardMarkup()

            for item in interests:
                if item in interests_user:
                    markup_inline.add(
                        types.InlineKeyboardButton(text=f'üîò {item}', callback_data=f'profile_removeinteres`{item}'))
                else:
                    markup_inline.add(
                        types.InlineKeyboardButton(text=f'‚ö™Ô∏è {item}', callback_data=f'profile_addinteres`{item}'))
            markup_inline.add(types.InlineKeyboardButton(text='‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data=f'profile_showprofile'))
            self.bot.edit_message_text("‚úèÔ∏è –ò–Ω—Ç–µ—Ä–µ—Å—ã", id, call.message.message_id, reply_markup=markup_inline)
        elif name == 'addinteres':
            interes = data.split('`')[1]
            interests_user_text = db_user_full_info.get_param(id, 'interests')
            interests_user = []
            interests_user_temp = []
            if interests_user_text is not None:
                interests_user_temp = interests_user_text.split(',')
            for i in range(len(interests_user_temp)):
                if interests_user_temp[i].strip() != "" and interests_user_temp[i].strip() != "None":
                    interests_user.append(interests_user_temp[i])
            interests_user.append(interes)
            db_user_full_info.update_param(id, 'interests', utils.list_to_str(interests_user), True)
            self.handle('editinterests', id, call)
        elif name == 'removeinteres':
            interes = data.split('`')[1]
            interests_user_text = db_user_full_info.get_param(id, 'interests')
            interests_user = []
            interests_user_temp = []
            if interests_user_text is not None:
                interests_user_temp = interests_user_text.split(',')
            for i in range(len(interests_user_temp)):
                if interests_user_temp[i].strip() != "" and interests_user_temp[i].strip() != "None":
                    interests_user.append(interests_user_temp[i].strip())
            try:
                interests_user.remove(interes.strip())
            except:
                pass
            db_user_full_info.update_param(id, 'interests', utils.list_to_str(interests_user), True)
            self.handle('editinterests', id, call)
        elif name == 'editbio':
            self.bot.clear_step_handler_by_chat_id(id)
            msg = self.bot.send_message(id, "‚úèÔ∏è –ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", reply_markup=create_cancel_keyboard("profile"))
            self.bot.register_next_step_handler(msg, self.update_bio)
        elif name == 'cancel':
            self.bot.clear_step_handler_by_chat_id(id)
            profile_controller.send_profile_info(call.from_user.id, self.bot, call.message.message_id)
        elif name == 'search':
            travel_id = data.split('`')[1]
            offset = int(data.split('`')[2])
            profile_controller.search_users(id, self.bot, offset, travel_id, call.message.message_id)

    def update_bio(self, message: Message):
        if message.text is None:
            bio_msg = self.bot.send_message(message.from_user.id,
                                            '‚ùå –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º :(\n–ü–æ–ø—Ä–æ–±—É–π —Å–æ—Å—Ç–∞–≤–∏—Ç—å –±—É–∫–≤–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è, –∏ –ø—Ä–∏—Å–ª–∞—Ç—å –µ–≥–æ –º–Ω–µ –µ—â—ë —Ä–∞–∑',
                                            reply_markup=create_cancel_keyboard("profile"))
            self.bot.register_next_step_handler(bio_msg, self.update_bio)
            return
        if len(message.text) == 0:
            bio_msg = self.bot.send_message(message.from_user.id,
                                            '‚ùå –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º :(\n–ü–æ–ø—Ä–æ–±—É–π —Å–æ—Å—Ç–∞–≤–∏—Ç—å –±—É–∫–≤–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è, –∏ –ø—Ä–∏—Å–ª–∞—Ç—å –µ–≥–æ –º–Ω–µ –µ—â—ë —Ä–∞–∑',
                                            reply_markup=create_cancel_keyboard("profile"))
            self.bot.register_next_step_handler(bio_msg, self.update_bio)
            return
        if len(message.text) > 500:
            bio_msg = self.bot.send_message(message.from_user.id,
                                            '‚ùå –£–ø—Å, –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ üò¨. –ü–æ–ø—Ä–æ–±—É–π —É–º–µ–Ω—å—à–∏—Ç—å –µ–≥–æ –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –µ—â—ë —Ä–∞–∑',
                                            reply_markup=create_cancel_keyboard("profile"))
            self.bot.register_next_step_handler(bio_msg, self.update_bio)
            return
        db_user.update_param_from_userid('Users', 'bio', message.text, message.from_user.id, True)
        profile_controller.send_profile_info(message.from_user.id, self.bot)

    def update_age(self, message: Message):
        age_text = message.text
        if not utils.is_int(age_text):
            age_message = self.bot.send_message(message.from_user.id,
                                                '‚ùå –ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —Ç—ã –æ—à–∏–±—Å—è :(\n–í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º üëá',
                                                reply_markup=create_cancel_keyboard('profile'))
            self.bot.register_next_step_handler(age_message, self.update_age)
            return
        age = int(message.text)
        if age < 1:
            age_message = self.bot.send_message(message.from_user.id,
                                                '‚ùå –í–æ–∑—Ä–∞—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∏–ª–∏ —Ä–∞–≤–Ω—ã–º –Ω—É–ª—é :(\n–í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º üëá',
                                                reply_markup=create_cancel_keyboard('profile'))
            self.bot.register_next_step_handler(age_message, self.update_age)
            return
        db_user.update_param_from_userid('Users', 'age', age, message.from_user.id, False)
        profile_controller.send_profile_info(message.from_user.id, self.bot)

    def update_place(self, message: Message):
        splited = message.text.split(',')
        if len(splited) < 2:
            msg = self.bot.send_message(message.from_user.id,
                                        '‚ùå –ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –∏ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–µ—Ö–∞—Ç—å\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –†–æ—Å—Å–∏—è, –ú–æ—Å–∫–≤–∞',
                                        reply_markup=create_cancel_keyboard('profile'))
            self.bot.register_next_step_handler(msg, self.update_place)
            return
        country_name = osm_manager.get_country(splited[0].strip())
        if country_name is None:
            msg = self.bot.send_message(message.from_user.id,
                                        '‚ùå –ù–∞ —Å–≤–æ–∏—Ö –∫–∞—Ä—Ç–∞—Ö —è –Ω–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã\n\n–ù–∞–ø–æ–º–∏–Ω–∞—é, —Ñ–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∞–∫–æ–π: –°—Ç—Ä–∞–Ω–∞, –≥–æ—Ä–æ–¥\n–ù–∞–ø—Ä–∏–º–µ—Ä: –†–æ—Å—Å–∏—è, –ú–æ—Å–∫–≤–∞',
                                        reply_markup=create_cancel_keyboard('profile'))
            self.bot.register_next_step_handler(msg, self.update_place)
            return
        city_name = osm_manager.get_city(splited[1].strip(), country_name[0])
        if city_name is None:
            msg = self.bot.send_message(message.from_user.id,
                                        '‚ùå –í —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ —è –Ω–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞\n–ù–∞–ø–æ–º–∏–Ω–∞—é, —Ñ–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∞–∫–æ–π: –°—Ç—Ä–∞–Ω–∞, –≥–æ—Ä–æ–¥. –ù–∞–ø—Ä–∏–º–µ—Ä: –†–æ—Å—Å–∏—è, –ú–æ—Å–∫–≤–∞',
                                        reply_markup=create_cancel_keyboard('profile'))
            self.bot.register_next_step_handler(msg, self.update_place)
            return
        db_places.update_place_info(message.from_user.id, 'country_id', country_name[1])
        db_places.update_place_info(message.from_user.id, 'city_id', city_name[1])
        db_user.update_param_from_userid('Users', 'country', country_name[0], message.from_user.id, True)
        db_user.update_param_from_userid('Users', 'city', city_name[0], message.from_user.id, True)

        profile_controller.send_profile_info(message.from_user.id, self.bot)
