from datetime import date

from telebot import TeleBot, types
from telebot.types import CallbackQuery, Message

from Controllers import payments_controller, guide_controller
from UserManager import user_manager
from Keyboards import create_cancel_keyboard
from DB import db_payments, db_dict, db_invite_friend, db_travel, db_guide
from utils import is_int, is_float


class payments_handle:
    def __init__(self, bot: TeleBot):
        self.bot = bot

    def handle(self, data, id, call: CallbackQuery):
        name = data.split('`')[0]

        if name == 'manager':
            self.bot.clear_step_handler_by_chat_id(id)
            travel_id = data.split('`')[1]
            if db_guide.user_not_have_guide(id, 'payments'):
                guide_controller.show_guide(self.bot, id,
                                            'payments',
                                            '‚ÑπÔ∏è –¢—Ä–∞—Ç—ã - —ç—Ç–æ –Ω–µ–æ—Ç—ä–µ–º–ª–µ–º–∞—è —á–∞—Å—Ç—å –ª—é–±–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è. –í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç—Ä–∞—Ç—ã, –¥–µ–ª–∏—Ç—å –∏—Ö –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ –∫–æ–Ω–µ—á–Ω–æ –∂–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Ö ',
                                            f'payments_manager`{travel_id}')
                return



            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(
                types.InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É',
                                           callback_data=f'payments_createpayment`{travel_id}'))
            markup_inline.add(
                types.InlineKeyboardButton(text='üóÇ –°–ø–∏—Å–æ–∫ —Ç—Ä–∞—Ç',
                                           callback_data=f'payments_listpayments`{travel_id}'))

            markup_inline.add(
                types.InlineKeyboardButton(text='üìí –°–ø–∏—Å–æ–∫ –¥–æ–ª–≥–æ–≤',
                                           callback_data=f'payments_debtorme`{travel_id}'),

                types.InlineKeyboardButton(text='üìí –°–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–∏–∫–æ–≤',
                                           callback_data=f'payments_mydebtors`{travel_id}')
            )
            markup_inline.add(
                types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥',
                                           callback_data=f'travel_show`{travel_id}`edit'))
            self.bot.edit_message_text("üíµ –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç—Ä–∞—Ç", id, call.message.message_id, reply_markup=markup_inline)
        elif name == 'debtorme':
            self.bot.clear_step_handler_by_chat_id(id)
            travel_id = data.split('`')[1]
            debtors = db_payments.i_debtors(travel_id, id)
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(
                types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥',
                                           callback_data=f'payments_manager`{travel_id}`edit'))
            if len(debtors.keys()) == 0:
                self.bot.edit_message_text("–í—ã –Ω–∏–∫–æ–º—É –Ω–µ –¥–æ–ª–∂–Ω—ã üëå", id, call.message.message_id,
                                           reply_markup=markup_inline)
                return
            message = "<b>–í—ã –¥–æ–ª–∂–Ω—ã</b>\n\n"
            for debtor in debtors.keys():
                message += f"@{debtor}: {debtors[debtor]}‚ÇΩ\n"
            self.bot.edit_message_text(message, id, call.message.message_id, reply_markup=markup_inline,
                                       parse_mode='html')
        elif name == 'mydebtors':
            self.bot.clear_step_handler_by_chat_id(id)
            travel_id = data.split('`')[1]
            debtors = db_payments.my_debtors(travel_id, id)
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(
                types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥',
                                           callback_data=f'payments_manager`{travel_id}`edit'))
            if len(debtors.keys()) == 0:

                self.bot.edit_message_text("–°–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–∏–∫–æ–≤ –ø—É—Å—Ç üëå",id, call.message.message_id, reply_markup=markup_inline)
                return
            message = "<b>–í–∞—à–∏ –¥–æ–ª–∂–Ω–∏–∫–∏</b>\n\n"
            for debtor in debtors.keys():
                message += f"@{debtor}: {debtors[debtor]}‚ÇΩ\n"
            self.bot.edit_message_text(message, id, call.message.message_id, reply_markup=markup_inline, parse_mode='html')
        elif name == 'listpayments':
            self.bot.clear_step_handler_by_chat_id(id)
            travel_id = data.split('`')[1]
            offset = 0
            if len(data.split('`')) > 2:
                offset = data.split('`')[2]
            payments_controller.send_list_payments(travel_id, self.bot, id, call.message.message_id, offset)
        elif name == 'createpayment':
            self.bot.clear_step_handler_by_chat_id(id)
            travel_id = data.split('`')[1]
            msg = self.bot.send_message(id, '‚úèÔ∏è –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ç—ã', reply_markup=
            create_cancel_keyboard('payments'))
            self.bot.register_next_step_handler(msg, self.enter_title_payment)
            user_manager.set_payload(id, travel_id)
        elif name == 'cancel':
            self.bot.clear_step_handler_by_chat_id(id)
            payload_object = user_manager.get_payload(id)
            payload = []
            if payload_object is not None:
                payload = user_manager.get_payload(id).split('`')

            if len(payload) >= 2:
                try:
                    travel_id = payload[0]
                    payment_id = payload[1]
                    self.handle(f'manager`{travel_id}', id, call)
                    db_payments.remove_payment(travel_id, payment_id)
                    return
                except:
                    pass
            elif len(payload) == 1:
                travel_id = payload[0]
                self.handle(f'manager`{travel_id}', id, call)
                return
            self.bot.edit_message_text('‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ', id, call.message.message_id)
        elif name == 'showaddinguser':
            self.bot.clear_step_handler_by_chat_id(id)
            travel_id = data.split('`')[1]
            payment_id = data.split('`')[2]

            users = db_payments.get_users_in_payment(travel_id, payment_id)
            markup_inline = types.InlineKeyboardMarkup()

            for i in range(len(users)):
                username = db_dict.get_username_from_id(users[i][0])
                markup_inline.add(
                    types.InlineKeyboardButton(text=f'{username} | {users[i][1]}‚ÇΩ',
                                               callback_data=f'payments_removefromlist`{travel_id}`{payment_id}`{users[i][0]}'))

            markup_inline.add(
                types.InlineKeyboardButton(text=f'‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                                           callback_data=f'payments_adduser`{travel_id}`{payment_id}`'))
            markup_inline.add(
                types.InlineKeyboardButton(text=f'‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
                                           callback_data=f'payments_createpaymentfinish`{travel_id}`{payment_id}`'))

            if 'edit' in data:
                self.bot.edit_message_text(f"üìé –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è, –∫–æ–≥–æ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ —ç—Ç—É —Ç—Ä–∞—Ç—É", id,
                                           call.message.message_id,
                                           reply_markup=markup_inline)
            else:
                self.bot.send_message(id, f"üìé –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è, –∫–æ–≥–æ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ —ç—Ç—É —Ç—Ä–∞—Ç—É",
                                      reply_markup=markup_inline)
        elif name == 'removefromlist':
            travel_id = data.split('`')[1]
            payment_id = data.split('`')[2]
            debtor_id = data.split('`')[3]

            db_payments.remove_from_payment_info(travel_id, payment_id, debtor_id)
            self.handle(f'showaddinguser`{travel_id}`{payment_id}`edit', id, call)
        elif name == 'adduser':
            self.bot.clear_step_handler_by_chat_id(id)
            travel_id = data.split('`')[1]
            payment_id = data.split('`')[2]

            users = db_payments.get_users_in_payment(travel_id, payment_id)
            travel_users = db_invite_friend.get_all_ids(travel_id)
            owner_id = int(travel_id.split('_')[0])

            if owner_id != call.from_user.id:
                travel_users.append(owner_id)

            markup_inline = types.InlineKeyboardMarkup()
            if len(travel_users) == 0:
                markup_inline.add(
                    types.InlineKeyboardButton(text=f'üîô –ù–∞–∑–∞–¥',
                                               callback_data=f'payments_showaddinguser`{travel_id}`{payment_id}`edit'))
                self.bot.send_message(id, "‚ÄºÔ∏è –í –¥–∞–Ω–Ω–æ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", reply_markup=markup_inline)
                return

            for user in travel_users:
                if user != call.from_user.id:
                    well = True
                    for j in users:
                        if user in j:
                            well = False
                    if well:
                        username = db_dict.get_username_from_id(user)
                        markup_inline.add(
                            types.InlineKeyboardButton(text=f'{username}',
                                                       callback_data=f'payments_adduser2`{travel_id}`{payment_id}`{user}'))
            markup_inline.add(
                types.InlineKeyboardButton(text=f'üîô –ù–∞–∑–∞–¥',
                                           callback_data=f'payments_showaddinguser`{travel_id}`{payment_id}`edit'))

            self.bot.edit_message_text("–ö–∞–∫–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã—Å—Ç–∞–≤–∏–º —Å—á—ë—Ç?", id, call.message.message_id,
                                       reply_markup=markup_inline)
        elif name == 'adduser2':
            self.bot.clear_step_handler_by_chat_id(id)
            travel_id = data.split('`')[1]
            payment_id = data.split('`')[2]
            debtor_id = data.split('`')[3]

            user_manager.set_payload(id, f"{travel_id}`{payment_id}`{debtor_id}")
            msg = self.bot.send_message(id, "‚úèÔ∏è –°–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å?")
            self.bot.register_next_step_handler(msg, self.enter_amount_to_payment_info)
        elif name == 'createpaymentfinish':
            self.bot.clear_step_handler_by_chat_id(id)
            user_manager.set_payload(id, '')
            travel_id = data.split('`')[1]
            payment_id = data.split('`')[2]
            users = db_payments.get_users_in_payment(travel_id, payment_id)

            title = db_payments.get_payment_info(travel_id, payment_id)[0]
            travel_title = db_travel.get_information(travel_id)[1]
            for user in users:
                self.bot.send_message(user[0], f'üîî –í–∞—Å –¥–æ–±–∞–≤–∏–ª–∏ –≤ —Ç—Ä–∞—Ç—É <b>"{title}"</b>, –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏ "<b>{travel_title}</b>"\n–í–∞—à –¥–æ–ª–≥: <b>{user[1]}‚ÇΩ</b>',
                                      parse_mode='html')
            self.handle(f'open`{travel_id}`{payment_id}', id, call)
        elif name == 'open':
            self.bot.clear_step_handler_by_chat_id(id)
            travel_id = data.split('`')[1]
            payment_id = data.split('`')[2]

            payment_info = db_payments.get_payment_info(travel_id, payment_id)
            users_in_payment = db_payments.get_users_in_payment(travel_id, payment_id)
            username_owner = db_dict.get_username_from_id(payment_info[3])
            markup_inline = types.InlineKeyboardMarkup()
            for user_in_payment in users_in_payment:
                username = db_dict.get_username_from_id(user_in_payment[0])
                markup_inline.add(
                    types.InlineKeyboardButton(text=f'{username} | {user_in_payment[1]}‚ÇΩ',
                                               callback_data=f'payments_fullinfo`{travel_id}`{payment_id}`{user_in_payment[0]}'))
            markup_inline.add(
                types.InlineKeyboardButton(text=f'üîô –ù–∞–∑–∞–¥',
                                           callback_data=f'payments_listpayments`{travel_id}'))

            added_text = ''
            if len(users_in_payment) > 0:
                added_text = '\n\n–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—Ä–∞—Ç—ã üëá'
            self.bot.edit_message_text(
                f"<b>{payment_info[0]}</b>\n–î–∞—Ç–∞ —Ç—Ä–∞—Ç—ã: <b>{payment_info[1]}</b>\n–°—É–º–º–∞: <b>{payment_info[2]}</b>\n–°–æ–∑–¥–∞—Ç–µ–ª—å —Ç—Ä–∞—Ç—ã: @{username_owner}{added_text}",
                id, call.message.message_id, parse_mode='html', reply_markup=markup_inline)
        elif name == 'fullinfo':
            self.bot.clear_step_handler_by_chat_id(id)
            travel_id = data.split('`')[1]
            payment_id = data.split('`')[2]
            debtor_id = data.split('`')[3]

            payment_info = db_payments.get_payment_info(travel_id, payment_id)
            owner_id = payment_info[3]
            debtor_info = db_payments.get_user_payment_info(travel_id, payment_id, debtor_id)

            markup_inline = types.InlineKeyboardMarkup()
            if owner_id == call.from_user.id and int(debtor_info[1]) == 0:
                markup_inline.add(
                    types.InlineKeyboardButton(text=f'‚úÖ –ó–∞–∫—Ä—ã—Ç—å –¥–æ–ª–≥',
                                               callback_data=f'payments_closedebtor`{travel_id}`{payment_id}`{debtor_info[2]}'))
            markup_inline.add(
                types.InlineKeyboardButton(text=f'üîô –ù–∞–∑–∞–¥',
                                           callback_data=f'payments_open`{travel_id}`{payment_id}'))
            status = "–æ—Ç–∫—Ä—ã—Ç"
            if int(debtor_info[1]) == 1:
                status = '–∑–∞–∫—Ä—ã—Ç'
            self.bot.edit_message_text(f"–°—É–º–º–∞ –¥–æ–ª–≥–∞: <b>{debtor_info[0]}‚ÇΩ</b>\n–°—Ç–∞—Ç—É—Å –¥–æ–ª–≥–∞: <b>{status}</b>", id,
                                       call.message.message_id, reply_markup=markup_inline, parse_mode='html')
        elif name == 'closedebtor':
            travel_id = data.split('`')[1]
            payment_id = data.split('`')[2]
            debtor_id = data.split('`')[3]

            db_payments.update_payment_info(travel_id, payment_id, debtor_id, 'status', 1, False)
            self.handle(f'fullinfo`{travel_id}`{payment_id}`{debtor_id}', id, call)

    def enter_amount_to_payment_info(self, message: Message):
        payload = user_manager.get_payload(message.from_user.id).split('`')

        travel_id = payload[0]
        payment_id = payload[1]
        debtor_id = payload[2]

        if not is_float(message.text):
            msg = self.bot.send_message(message.from_user.id,
                                        "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ, –±–µ–∑ –±—É–∫–≤. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑", reply_markup=
                                        create_cancel_keyboard('payments'))
            self.bot.register_next_step_handler(msg, self.enter_amount_to_payment_info)
            return
        if float(message.text) <= 0:
            msg = self.bot.send_message(message.from_user.id,
                                        "‚ùå –ß–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∏–ª–∏ —Ä–∞–≤–Ω—è—Ç—å—Å—è –Ω—É–ª—é", reply_markup=
                                        create_cancel_keyboard('payments'))
            self.bot.register_next_step_handler(msg, self.enter_amount_to_payment_info)
            return
        if not db_payments.is_well_amount(message.text, travel_id, payment_id):
            msg = self.bot.send_message(message.from_user.id,
                                        "‚ùå –° —ç—Ç–∏–º —á–∏—Å–ª–æ–º, —Å—É–º–º–∞ –æ–ø–µ—Ä—Ü–∏–π –±—É–¥–µ—Ç –±–æ–ª—å—à–µ —Å—É–º–º—ã —Ç—Ä–∞—Ç—ã. –¢–∞–∫ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è :(",
                                        reply_markup=
                                        create_cancel_keyboard('payments'))
            self.bot.register_next_step_handler(msg, self.enter_amount_to_payment_info)
            return
        db_payments.create_payment_info(travel_id, payment_id, debtor_id, message.text)
        self.handle(f'showaddinguser`{travel_id}`{payment_id}', message.from_user.id, None)

    def enter_title_payment(self, message: Message):
        travel_id = user_manager.get_payload(message.from_user.id)
        if message.text is None:
            msg = self.bot.send_message(message.from_user.id,'‚ùå –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑',
                                        reply_markup=
                                        create_cancel_keyboard('payments'))
            self.bot.register_next_step_handler(msg, self.enter_title_payment)
            return
        if len(message.text) > 50:
            msg = self.bot.send_message(message.from_user.id,'‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ç—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥—É–º–∞–π –∫–∞–∫ –º–æ–∂–Ω–æ –µ–≥–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å',
                                     reply_markup=
                                        create_cancel_keyboard('payments'))
            self.bot.register_next_step_handler(msg, self.enter_title_payment)
            return

        payment_id = db_payments.create_payment(travel_id, message.from_user.id)
        user_manager.set_payload(message.from_user.id, f"{travel_id}`{payment_id}")
        db_payments.update_param(travel_id, payment_id, "title", message.text, True)

        msg = self.bot.send_message(message.from_user.id,
                                    '‚úèÔ∏è –ö–æ–≥–¥–∞ –±—ã–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ —Ç—Ä–∞—Ç–∞?\n\n–í–≤–µ–¥–∏ –¥–∞—Ç—É –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: 16.06.2024',
                                    reply_markup=create_cancel_keyboard('payments'))
        self.bot.register_next_step_handler(msg, self.enter_data_payment)

    def _check_data(self, text):
        if text is None:
            return False
        nodes = text.split('.')
        if len(nodes) != 3:
            return False
        if not (is_int(nodes[0]) and is_int(nodes[1]) and is_int(nodes[2])):
            return False
        day = int(nodes[0])
        month = int(nodes[1])
        year = int(nodes[2])

        if month > 12 or month < 1:
            return False
        if day > 31 or day < 1:
            return False
        if year < 2024:
            return False
        try:
            d = date(year, month, day)
        except:
            return False

        return True

    def enter_data_payment(self, message: Message):
        if not self._check_data(message.text):
            msg = self.bot.send_message(
                message.from_user.id,
                '‚ùå –î–∞—Ç–∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è :(\n\n–í–≤–µ–¥–∏ –¥–∞—Ç—É –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: 16.06.2024',
                reply_markup=create_cancel_keyboard('payments'))
            self.bot.register_next_step_handler(msg, self.enter_data_payment)
            return
        payload = user_manager.get_payload(message.from_user.id).split('`')

        travel_id = payload[0]
        payment_id = payload[1]

        db_payments.update_param(travel_id, payment_id, "date", message.text, True)
        msg = self.bot.send_message(message.from_user.id,
                                    '‚úèÔ∏è –¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å—É–º–º—É —Ç—Ä–∞—Ç—ã',
                                    reply_markup=create_cancel_keyboard('payments'))
        self.bot.register_next_step_handler(msg, self.enter_amount_payment)

    def enter_amount_payment(self, message: Message):
        if not is_float(message.text):
            msg = self.bot.send_message(message.from_user.id,
                                        '‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ, –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –∑–Ω–∞–∫–æ–≤. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑',
                                        reply_markup=create_cancel_keyboard('payments'))
            self.bot.register_next_step_handler(msg, self.enter_amount_payment)
            return
        if float(message.text) <= 0:
            msg = self.bot.send_message(message.from_user.id,
                                        '‚ùå –ß–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∏–ª–∏ —Ä–∞–≤–Ω—è—Ç—å—Å—è –Ω—É–ª—é',
                                        reply_markup=create_cancel_keyboard('payments'))
            self.bot.register_next_step_handler(msg, self.enter_amount_payment)
            return
        payload = user_manager.get_payload(message.from_user.id).split('`')
        travel_id = payload[0]
        payment_id = payload[1]

        db_payments.update_param(travel_id, payment_id, "amount", round(float(message.text), 2), False)
        users = db_payments.get_users_in_payment(travel_id, payment_id)
        markup_inline = types.InlineKeyboardMarkup()

        for i in range(len(users)):
            username = db_dict.get_username_from_id(users[i][0])
            markup_inline.add(
                types.InlineKeyboardButton(text=f'{username} | {users[i][1]}‚ÇΩ',
                                           callback_data=f'payments_removefromlist`{travel_id}`{payment_id}`{users[i][0]}'))

        markup_inline.add(
            types.InlineKeyboardButton(text=f'‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                                       callback_data=f'payments_adduser`{travel_id}`{payment_id}`'))
        markup_inline.add(
            types.InlineKeyboardButton(text=f'‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
                                       callback_data=f'payments_createpaymentfinish`{travel_id}`{payment_id}`'))

        self.bot.send_message(message.from_user.id, f"üìé –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è, –∫–æ–≥–æ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ —ç—Ç—É —Ç—Ä–∞—Ç—É",
                              reply_markup=markup_inline)
