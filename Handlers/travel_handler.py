import math
import time
import utils

from telebot import TeleBot, types
from telebot.types import Message, CallbackQuery
from datetime import date

from UserManager import user_manager
from Keyboards import create_cancel_keyboard
from DB import db_locations, db_travel, db_dict, db_invite_friend, db_places, db_exchange, db_user
from OSM import osm_manager
from utils import is_int
from Controllers import travel_controller, places_controller
from Parsers import weather_controller
from utils import to_unix_time, is_owner_travel



class travel_handle:
    def __init__(self, bot: TeleBot):
        self.bot = bot

    def handle(self, data, id, call: CallbackQuery):

        name = data.split('`')[0]
        if name == 'addlocation':
            self.bot.clear_step_handler_by_chat_id(id)
            travel_id = data.split('`')[1]
            msg = self.bot.send_message(id,
                                        'üöÑ –ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –∏ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–µ—Ö–∞—Ç—å\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –†–æ—Å—Å–∏—è, –ú–æ—Å–∫–≤–∞',
                                        reply_markup=create_cancel_keyboard('travel'))
            self.bot.register_next_step_handler(msg, self.select_locate)
            user_manager.set_payload(id, travel_id)
        elif name == 'skipenterdisc':
            travel_id = data.split('`')[1]
            db_travel.update_travel_parm(call.from_user.id, travel_id, 'description', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(
                types.InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é', callback_data='travel_addlocation`' + travel_id))
            self.bot.edit_message_text('‚ùì –ê —Å–µ–π—á–∞—Å –≥–ª–∞–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å - –∫—É–¥–∞ —Å–æ–±–∏—Ä–∞–µ–º—Å—è –µ—Ö–∞—Ç—å?', call.from_user.id,
                                       call.message.message_id,
                                       reply_markup=markup_inline)
        elif name == 'cancel':
            payload_object = user_manager.get_payload(id)
            payload = []
            if payload_object != None:
                payload = user_manager.get_payload(id).split('`')
            if len(payload) != 0:
                if len(payload) == 1:
                    info_travel = db_travel.get_information(payload[0])
                    if info_travel is not None:
                        if info_travel[2] is None and info_travel[1] is not None:
                            db_travel.remove_travel(call.from_user.id, payload[0])
                if len(payload) == 1 or len(payload) == 3:
                    self.bot.clear_step_handler_by_chat_id(id)
                else:
                    db_locations.remove_location(payload[0], payload[1])
                    self.bot.clear_step_handler_by_chat_id(id)
            self.bot.delete_message(id, call.message.message_id)
            self.bot.send_message(id, "‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ")
        elif name == 'show':
            self.bot.clear_step_handler_by_chat_id(id)
            travel_id = data.split('`')[1]
            is_edit = 'edit' in data
            travel_info = db_travel.get_information(travel_id)
            if travel_info is None:
                self.bot.send_message(id, '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
                return

            locations = db_locations.get_information(travel_id)
            count_location = len(locations)

            markup_inline = types.InlineKeyboardMarkup()
            if is_owner_travel(travel_id, id):
                markup_inline.add(
                    types.InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é',
                                               callback_data='travel_addlocation`' + travel_id),
                    types.InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É', callback_data='notes_addnote`' + travel_id))
            else:
                markup_inline.add(
                    types.InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É', callback_data='notes_addnote`' + travel_id))
            markup_inline.add(
                types.InlineKeyboardButton(text='üó∫ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–∫–∞—Ü–∏–∏',
                                           callback_data='travel_showlocations`' + travel_id + '`0'),
                types.InlineKeyboardButton(text='üìë –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏',
                                           callback_data='notes_shownotes`' + travel_id + '`0')
            )

            markup_inline.add(
                types.InlineKeyboardButton(text='üó∫ –ü—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç',
                                           callback_data='travel_createmap`' + travel_id))

            markup_inline.add(types.InlineKeyboardButton(text='üí∞ –û–±—â–∏–µ —Ç—Ä–∞—Ç—ã',
                                                         callback_data=f'payments_manager`{travel_id}'))
            if is_owner_travel(travel_id, id):
                markup_inline.add(
                    types.InlineKeyboardButton(text='‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ–º',
                                               callback_data='travel_control`' + travel_id))

            text_message = f"ID: <code>{travel_id}</code>\n–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{travel_info[1]}</b>\n–û–ø–∏—Å–∞–Ω–∏–µ:\n<b>{travel_info[2]}</b>\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–∫–∞—Ü–∏–π: <b>{count_location}</b>\n–í—Ä–µ–º—è –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏: <b>{utils.decline_number(db_travel.get_count_day_in_travel(travel_id))}</b>"
            if not is_edit:
                self.bot.send_message(id, text_message,
                                      reply_markup=markup_inline, parse_mode='html')
            else:
                self.bot.edit_message_text(text_message, id,
                                           call.message.message_id,
                                           reply_markup=markup_inline, parse_mode='html')
        elif name == 'control':
            self.bot.clear_step_handler_by_chat_id(id)
            travel_id = data.split('`')[1]

            markup_inline = types.InlineKeyboardMarkup()
            if is_owner_travel(travel_id, id):
                markup_inline.add(types.InlineKeyboardButton(text='üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ',
                                                             callback_data='travel_changetitle`' + travel_id),
                                  types.InlineKeyboardButton(text='üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ',
                                                             callback_data='travel_changedescription`' + travel_id))
                markup_inline.add(
                    types.InlineKeyboardButton(text='üìß –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞',
                                               callback_data='travel_invitefriend`' + travel_id))
                if db_exchange.travel_in_exchange(travel_id):
                    markup_inline.add(types.InlineKeyboardButton(text='üîò –£–±—Ä–∞—Ç—å —Å –±–∏—Ä–∂–∏',
                                                                 callback_data=f'exchange_removefromexchange`{travel_id}'))
                else:
                    markup_inline.add(types.InlineKeyboardButton(text='‚ö™Ô∏è –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–∞ –±–∏—Ä–∂–µ',
                                                                 callback_data=f'exchange_createexchange`{travel_id}'))
                markup_inline.add(
                    types.InlineKeyboardButton(text='üîç –ü–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                                               callback_data=f'profile_search`{travel_id}`0'))
                markup_inline.add(
                    types.InlineKeyboardButton(text='üóû –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏',
                                               callback_data=f'travel_userscontroll`{travel_id}'))
                markup_inline.add(
                    types.InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ',
                                               callback_data='travel_removetravel`' + travel_id))
                markup_inline.add(
                    types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥',
                                               callback_data='travel_show`' + travel_id+'`edit'))
            self.bot.edit_message_text('‚å®Ô∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ–º', id, call.message.message_id, reply_markup=markup_inline)
        elif name == 'userscontroll':
            self.bot.clear_step_handler_by_chat_id(id)
            travel_id = data.split('`')[1]
            markup_inline = types.InlineKeyboardMarkup()


            users = db_invite_friend.get_all_ids(travel_id)
            if len(users) == 0:
                markup_inline.add(
                    types.InlineKeyboardButton(text=f'üîô –ù–∞–∑–∞–¥',
                                               callback_data=f'travel_control`{travel_id}`edit'))
                self.bot.edit_message_text('üåå –í—ã –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', id, call.message.message_id,
                                           reply_markup=markup_inline)

                return

            for user in users:
                username = db_dict.get_username_from_id(user)
                markup_inline.add(
                    types.InlineKeyboardButton(text=f'{username}',
                                               callback_data=f'travel_remuser`{travel_id}`{username}`{user}'))
            markup_inline.add(
                types.InlineKeyboardButton(text=f'üîô –ù–∞–∑–∞–¥',
                                           callback_data=f'travel_control`{travel_id}`edit'))
            self.bot.edit_message_text('üåå –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', id, call.message.message_id, reply_markup=markup_inline)
        elif name == 'remuser':
            self.bot.clear_step_handler_by_chat_id(id)
            travel_id = data.split('`')[1]
            username = data.split('`')[2]
            user_id = data.split('`')[3]

            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(
                types.InlineKeyboardButton(text=f'‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å',
                                           callback_data=f'travel_remuserconfirm`{travel_id}`{user_id}'))
            markup_inline.add(
                types.InlineKeyboardButton(text=f'üîô –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å',
                                           callback_data=f'travel_userscontroll`{travel_id}'))

            self.bot.edit_message_text(f'–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}?', id, call.message.message_id, reply_markup=markup_inline)
        elif name == 'remuserconfirm':
            travel_id = data.split('`')[1]
            user_id = data.split('`')[2]
            title = db_travel.get_information(travel_id)[1]
            db_invite_friend.remove_user(user_id, travel_id)
            self.bot.send_message(user_id, f'‚õîÔ∏è –£–ø—Å, —Ç–µ–±—è —É–¥–∞–ª–∏–ª–∏ –∏–∑ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è "<b>{title}</b>"', parse_mode='html')
            self.handle(f'userscontroll`{travel_id}', id, call)
        elif name == 'changetitle':
            self.bot.clear_step_handler_by_chat_id(id)
            travel_id = data.split('`')[1]
            user_manager.set_payload(id, travel_id)
            msg = self.bot.send_message(id, '‚úèÔ∏è –ü—Ä–∏–¥—É–º–∞–π –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
                                        reply_markup=create_cancel_keyboard('travel'))
            self.bot.register_next_step_handler(msg, self.change_title)
        elif name == 'changedescription':
            self.bot.clear_step_handler_by_chat_id(id)
            travel_id = data.split('`')[1]
            user_manager.set_payload(id, travel_id)
            msg = self.bot.send_message(id, '‚úèÔ∏è –ü—Ä–∏–¥—É–º–∞–π –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
                                        reply_markup=create_cancel_keyboard('travel'))
            self.bot.register_next_step_handler(msg, self.change_description)
        elif name == 'invitefriend':
            self.bot.clear_step_handler_by_chat_id(id)
            travel_id = data.split('`')[1]
            user_manager.set_payload(id, travel_id)
            msg = self.bot.send_message(id,
                                        "‚ùóÔ∏è–¢—ã –º–æ–∂–µ—à—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –≤ —Å–≤–æ—ë –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ. –ï–º—É –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω—ë–º\n\n–î–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, –Ω–∞–ø–∏—à–∏ –∏–º—è –¥—Ä—É–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username (–¥—Ä—É–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ)",
                                        reply_markup=create_cancel_keyboard('travel'))
            self.bot.register_next_step_handler(msg, self.invite_friend)
        elif name == 'removetravel':
            self.bot.clear_step_handler_by_chat_id(id)
            travel_id = data.split('`')[1]

            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(
                types.InlineKeyboardButton(text='üóë –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data='travel_removeconfirm`' + travel_id))
            markup_inline.add(
                types.InlineKeyboardButton(text='‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å',
                                           callback_data='travel_hideremovemessage`' + travel_id))
            self.bot.edit_message_text('–£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ?', id, call.message.message_id,
                                       reply_markup=markup_inline)
        elif name == 'showalltravels':
            travel_controller.send_travel_list(self.bot, id, 0)
        elif name == 'removeconfirm':
            self.bot.clear_step_handler_by_chat_id(id)
            travel_id = data.split('`')[1]
            db_travel.remove_travel(id, travel_id)
            self.bot.delete_message(id, call.message.message_id)
            travel_controller.send_travel_list(self.bot, id, 0)
        elif name == 'hideremovemessage':
            self.bot.clear_step_handler_by_chat_id(id)
            travel_id = data.split('`')[1]
            self.handle(f'show`{travel_id}`edit', id, call)
        elif name == 'showlocations':
            self.bot.clear_step_handler_by_chat_id(id)
            travel_id = data.split('`')[1]
            offset = int(data.split('`')[2])
            locations = db_locations.get_information(travel_id)

            if len(locations) == 0:
                markup_inline = types.InlineKeyboardMarkup()
                if 'exchange' in data:
                    markup_inline.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥',
                                                                 callback_data=f'exchange_open`{travel_id}`0'))
                else:
                    markup_inline.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥',
                                                             callback_data=f'travel_show`{travel_id}`edit'))
                self.bot.send_message(id, '–ö –¥–∞–Ω–Ω–æ–º—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–∫–∞—Ü–∏–π', reply_markup=markup_inline)
                return
            date = f"{locations[offset][3]}"
            if locations[offset][4] is None:
                date += "\n(1 –¥–µ–Ω—å)"
            else:
                if locations[offset][4].strip() == '':
                    date += " (–æ–¥–∏–Ω –¥–µ–Ω—å)"
                else:

                    days_count = math.ceil(
                        (to_unix_time(locations[offset][4]) - to_unix_time(locations[offset][3])) / 86400)
                    date += f"-{locations[offset][4]}\n"
                    date += f"({utils.decline_number(days_count)})"

            message = f"–õ–æ–∫–∞—Ü–∏—è ‚Ññ{offset + 1}\n\n–ú–µ—Å—Ç–æ:\n<b>{locations[offset][1]}</b>\n\n–î–∞—Ç–∞ –ø—Ä–∏–±—ã–≤–∞–Ω–∏—è:\n<b>{date}</b>"

            cords = db_places.get_cord(locations[offset][2])

            web_info = types.WebAppInfo(f"https://yandex.ru/maps/?ll={cords[1]},{cords[0]}&z=16&text=–∫–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã")
            hostels_info = types.WebAppInfo(f"https://yandex.ru/maps/?ll={cords[1]},{cords[0]}&z=16&text=–æ—Ç–µ–ª–∏")
            attraction_info = types.WebAppInfo(f"https://yandex.ru/maps/?ll={cords[1]},{cords[0]}&z=16&text=–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
            markup_inline = types.InlineKeyboardMarkup()
            if offset == 0 and offset + 1 < len(locations):
                markup_inline.add(
                    types.InlineKeyboardButton(text='‚û°Ô∏è',
                                               callback_data=f'travel_showlocations`{travel_id}`1'),
                    types.InlineKeyboardButton(text='‚è©',
                                               callback_data=f'travel_showlocations`{travel_id}`{len(locations) - 1}')
                )

            elif offset + 1 < len(locations) and offset > 0:
                markup_inline.add(
                    types.InlineKeyboardButton(text='‚è™',
                                               callback_data=f'travel_showlocations`{travel_id}`0'),
                    types.InlineKeyboardButton(text='‚¨ÖÔ∏è',
                                               callback_data=f'travel_showlocations`{travel_id}`{offset - 1}'),
                    types.InlineKeyboardButton(text='‚û°Ô∏è',
                                               callback_data=f'travel_showlocations`{travel_id}`{offset + 1}'),
                    types.InlineKeyboardButton(text='‚è©',
                                               callback_data=f'travel_showlocations`{travel_id}`{len(locations) - 1}'),
                    row_width=4)
            elif offset + 1 == len(locations) and len(locations) != 1:
                markup_inline.add(types.InlineKeyboardButton(text='‚è™',
                                                             callback_data=f'travel_showlocations`{travel_id}`0'),
                                  types.InlineKeyboardButton(text='‚¨ÖÔ∏è',
                                                             callback_data=f'travel_showlocations`{travel_id}`{offset - 1}'))
            if is_owner_travel(travel_id, id):
                markup_inline.add(types.InlineKeyboardButton(text='üìù –ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ',
                                                             callback_data=f'travel_changeplace`{travel_id}`{locations[offset][5]}`{offset}'))
                if is_owner_travel(travel_id, id): markup_inline.add(
                    types.InlineKeyboardButton(text='üìù –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –ø—Ä–∏–±—ã–≤–∞–Ω–∏—è',
                                               callback_data=f'travel_changedate`{travel_id}`{locations[offset][5]}`{offset}'))
            markup_inline.add(types.InlineKeyboardButton("üçï –ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã", web_app=web_info),
                              types.InlineKeyboardButton("üö™ –û—Ç–µ–ª–∏", web_app=hostels_info))
            markup_inline.add(types.InlineKeyboardButton("üèü –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", web_app=attraction_info))
            exchange_add = ''
            if 'exchange' in data:
                exchange_add = "exchange"
            markup_inline.add(types.InlineKeyboardButton(text='üåÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã',
                                                         callback_data=f'travel_weatherinfo`{travel_id}`{locations[offset][5]}`{offset}`{exchange_add}'))
            if is_owner_travel(travel_id, id):
                markup_inline.add(types.InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é',
                                                             callback_data=f'travel_removelocation`{travel_id}`{locations[offset][5]}`{offset}'))
            if 'exchange' in data:
                markup_inline.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥',
                                                             callback_data=f'exchange_open`{travel_id}`0'))
            else:
                markup_inline.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥',
                                                             callback_data=f'travel_show`{travel_id}`edit'))

            self.bot.edit_message_text(message, id, call.message.message_id, reply_markup=markup_inline,
                                       parse_mode='html')
        elif name == 'removelocation':
            self.bot.clear_step_handler_by_chat_id(id)
            travel_id = data.split('`')[1]
            location_id = data.split('`')[2]
            offset = int(data.split('`')[3])
            if offset - 1 >= 0:
                offset = offset - 1
            db_locations.remove_location(travel_id, location_id)
            if len(db_locations.get_information(travel_id)) == 0:
                self.bot.delete_message(id, call.message.message_id)
            self.handle(f"showlocations`{travel_id}`{offset}", id, call)
        elif name == 'weatherinfo':
            self.bot.clear_step_handler_by_chat_id(id)

            travel_id = data.split('`')[1]
            location_id = data.split('`')[2]
            offset = data.split('`')[3]

            location = db_locations.get_location_information(travel_id, location_id)
            if location is None:
                return
            try:
                start_data = location[3].split('.')

                if location[4] is not None:
                    end_data = location[4].split('.')
                else:
                    end_data = start_data
                place_id = location[2]
                cords = db_places.get_cord(place_id)
                exchange_add = ''
                if 'exchange' in data:
                    exchange_add = "exchange"
                markup_inline = types.InlineKeyboardMarkup()
                markup_inline.add(
                    types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥',
                                               callback_data=f'travel_showlocations`{travel_id}`{offset}`edit`{exchange_add}'))
                msg = self.bot.edit_message_text("üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã", id, call.message.message_id)

                weathers_info = weather_controller.get_weather_interval(start_data[0], start_data[1], end_data[0],
                                                                        end_data[1], cords[0], cords[1])
                if len(weathers_info) < 30:
                    self.bot.edit_message_text("‚òÄÔ∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã\n\n" + '\n\n'.join(weathers_info), id, msg.message_id,
                                           reply_markup=markup_inline, parse_mode='html')
                else:
                    is_first = True
                    while len(weathers_info) != 0:
                        message_add = ''
                        if is_first:
                            message_add = "‚òÄÔ∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã\n\n"
                            is_first = False
                        temp_weather_info = []
                        count = 0
                        for i in range(0, len(weathers_info)):
                            temp_weather_info.append(weathers_info[i])
                            count += 1
                            if count >= 30:
                                break
                        for weather in temp_weather_info:
                            weathers_info.remove(weather)
                        if len(weathers_info) != 0:
                            self.bot.send_message(id, f"{message_add}"+'\n\n'.join(temp_weather_info), parse_mode='html')
                        else:
                            self.bot.send_message(id, f"{message_add}"+'\n\n'.join(temp_weather_info), reply_markup=markup_inline, parse_mode='html')

            except:
                markup_inline = types.InlineKeyboardMarkup()
                markup_inline.add(
                    types.InlineKeyboardButton(text='üîô –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ',
                                               callback_data=f'travel_showlocations`{travel_id}`{offset}`edit'))
                self.bot.send_message(id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã",
                                      reply_markup=markup_inline, parse_mode='html')
        elif name == 'changeplace':
            self.bot.clear_step_handler_by_chat_id(id)
            travel_id = data.split('`')[1]
            location_id = data.split('`')[2]
            offset = 0
            msg = self.bot.send_message(id,
                                        'üöÑ –ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –∏ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–µ—Ö–∞—Ç—å\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –†–æ—Å—Å–∏—è, –ú–æ—Å–∫–≤–∞',
                                        reply_markup=create_cancel_keyboard('travel'))
            self.bot.register_next_step_handler(msg, self.update_locate)
            user_manager.set_payload(id, f"{travel_id}`{location_id}`{offset}")
        elif name == 'changedate':
            self.bot.clear_step_handler_by_chat_id(id)
            travel_id = data.split('`')[1]
            location_id = data.split('`')[2]
            offset = 0
            msg = self.bot.send_message(call.from_user.id,
                                        f"–ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–µ –¥–∞—Ç—ã –¥–ª—è —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏\n\n–î–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \"–î–ï–ù–¨_–ó–ê–ï–ó–î–ê.–ú–ï–°–Ø–¶.–ì–û–î-–î–ï–ù–¨_–í–´–ï–ó–î–ê.–ú–ï–°–Ø–¶.–ì–û–î\"\n–ù–∞–ø—Ä–∏–º–µ—Ä\n\"16.06.2024-20.06.2024\"\n–ï—Å–ª–∏ –ø—Ä–∏–µ–∑–∂–∞–µ—à—å –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å, —Ç–æ –Ω–∞–ø–∏—à–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n\"–î–ï–ù–¨_–ó–ê–ï–ó–î–ê.–ú–ï–°–Ø–¶.–ì–û–î\"",
                                        reply_markup=create_cancel_keyboard('travel'))
            self.bot.register_next_step_handler(msg, self.update_data)
            user_manager.set_payload(id, f"{travel_id}`{location_id}`{offset}")
        elif name == 'allowinvite':
            self.bot.clear_step_handler_by_chat_id(id)
            travel_id = data.split('`')[1]

            self.bot.edit_message_text(
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é. –ï–≥–æ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ú–æ–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è\"",
                id, call.message.message_id)
            travel_name = db_travel.get_information(travel_id)[1]
            message_text = f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é \"{travel_name}\""
            self.bot.send_message(travel_id.split('_')[0], message_text)
            temp_id = id
            ids = db_invite_friend.get_all_ids(travel_id)
            for id in ids:
                self.bot.send_message(id, message_text)
            db_invite_friend.insert_invite(travel_id, temp_id)
        elif name == 'deniedinvite':
            self.bot.clear_step_handler_by_chat_id(id)

            self.bot.delete_message(id, call.message.message_id)
        elif name == 'createmap':
            self.bot.clear_step_handler_by_chat_id(id)

            travel_id = data.split('`')[1]
            markup = types.InlineKeyboardMarkup()
            web_info = types.WebAppInfo(places_controller.create_link_from_home(travel_id, id))
            web_info_2 = types.WebAppInfo(places_controller.create_link_from_first(travel_id))
            markup.add(types.InlineKeyboardButton("‚úàÔ∏è –ü—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –æ—Ç –¥–æ–º–∞",
                                                  web_app=web_info))
            markup.add(types.InlineKeyboardButton("‚úàÔ∏è –ü—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –æ—Ç –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏",
                                                  web_app=web_info_2))
            self.bot.send_message(id, "‚ùì –û—Ç–∫—É–¥–∞ –ø—Ä–æ–∫–ª–∞–¥—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç?", reply_markup=markup)

    def invite_friend(self, message: Message):
        travel_id = user_manager.get_payload(message.from_user.id)
        username = message.text.replace('@', '')
        if username == message.from_user.username:
            msg = self.bot.send_message(message.from_user.id,
                                        "‚ùå –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ :(",
                                        reply_markup=create_cancel_keyboard('travel'))
            self.bot.register_next_step_handler(msg, self.invite_friend)
            return
        user_id = db_dict.get_user_from_username(username)
        if user_id is None:
            msg = self.bot.send_message(message.from_user.id,
                                        "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–æ—Ç–µ! –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ",
                                        reply_markup=create_cancel_keyboard('travel'))
            self.bot.register_next_step_handler(msg, self.invite_friend)
            return
        if not db_invite_friend.is_new_user(user_id, travel_id):
            msg = self.bot.send_message(message.from_user.id,
                                        "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏",
                                        reply_markup=create_cancel_keyboard('travel'))
            self.bot.register_next_step_handler(msg, self.invite_friend)
            return
        travel_name = db_travel.get_information(travel_id)[1]
        markup_inline = types.InlineKeyboardMarkup()
        markup_inline.add(
            types.InlineKeyboardButton(text='‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data=f'travel_allowinvite`' + travel_id))
        markup_inline.add(
            types.InlineKeyboardButton(text='‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data=f'travel_deniedinvite'))
        self.bot.send_message(user_id,
                              f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç —Ç–µ–±—è –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ \"{travel_name}\"",
                              reply_markup=markup_inline)
        self.bot.send_message(message.from_user.id, "‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

    def update_data(self, message: Message):
        text = message.text.replace("\"", "").strip()
        payload = user_manager.get_payload(message.from_user.id).split('`')

        location_good = False
        if len(text.split('-')) == 1:
            if self._check_data(message.from_user.id, text, True):
                db_locations.update_param(payload[0], payload[1], 'start_date', f'{text}')
                db_locations.update_param(payload[0], payload[1], 'end_date', f'')
                location_good = True
        else:
            splited = text.split('-')
            if self._check_two_data(message.from_user.id, splited[0], splited[1], True):
                db_locations.update_param(payload[0], payload[1], 'start_date', f'{splited[0]}')
                db_locations.update_param(payload[0], payload[1], 'end_date', f'{splited[1]}')
                location_good = True
        if location_good:
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(
                types.InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é', callback_data='travel_addlocation`' + payload[0]))
            markup_inline.add(
                types.InlineKeyboardButton(text='üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', callback_data='travel_show`' + payload[0]))
            self.bot.send_message(message.from_user.id, "‚úèÔ∏è –î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞! –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?",
                                  reply_markup=markup_inline)

    def update_locate(self, message: Message):
        splited = message.text.split(',')
        payload = user_manager.get_payload(message.from_user.id).split('`')
        if len(splited) < 2:
            msg = self.bot.send_message(message.from_user.id,
                                        '‚ùå –ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –∏ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–µ—Ö–∞—Ç—å\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –†–æ—Å—Å–∏—è, –ú–æ—Å–∫–≤–∞',
                                        reply_markup=create_cancel_keyboard('travel'))
            self.bot.register_next_step_handler(msg, self.update_locate)
            return
        country_name = osm_manager.get_country(splited[0].strip())
        if country_name is None:
            msg = self.bot.send_message(message.from_user.id,
                                        '‚ùå –ù–∞ —Å–≤–æ–∏—Ö –∫–∞—Ä—Ç–∞—Ö —è –Ω–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã\n\n–ù–∞–ø–æ–º–∏–Ω–∞—é, —Ñ–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∞–∫–æ–π: –°—Ç—Ä–∞–Ω–∞, –≥–æ—Ä–æ–¥\n–ù–∞–ø—Ä–∏–º–µ—Ä: –†–æ—Å—Å–∏—è, –ú–æ—Å–∫–≤–∞',
                                        reply_markup=create_cancel_keyboard('travel'))
            self.bot.register_next_step_handler(msg, self.update_locate)
            return
        city_name = osm_manager.get_city(splited[1].strip(), country_name[0])
        if city_name is None:
            msg = self.bot.send_message(message.from_user.id,
                                        '‚ùå –í —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ —è –Ω–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞\n–ù–∞–ø–æ–º–∏–Ω–∞—é, —Ñ–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∞–∫–æ–π: –°—Ç—Ä–∞–Ω–∞, –≥–æ—Ä–æ–¥. –ù–∞–ø—Ä–∏–º–µ—Ä: –†–æ—Å—Å–∏—è, –ú–æ—Å–∫–≤–∞',
                                        reply_markup=create_cancel_keyboard('travel'))
            self.bot.register_next_step_handler(msg, self.update_locate)
            return

        db_locations.update_param(payload[0], payload[1], "location_name", f"{country_name[0]}, {city_name[0]}")
        db_locations.update_param(payload[0], payload[1], "place_id", city_name[1], False)
        markup_inline = types.InlineKeyboardMarkup()
        markup_inline.add(
            types.InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é', callback_data='travel_addlocation`' + payload[0]))
        markup_inline.add(
            types.InlineKeyboardButton(text='üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', callback_data='travel_show`' + payload[0]))
        self.bot.send_message(message.from_user.id, "‚úèÔ∏è –ú–µ—Å—Ç–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ! –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?",
                              reply_markup=markup_inline)

    def change_description(self, message: Message):
        travel_id = user_manager.get_payload(message.from_user.id)
        if message.text is None:
            msg = self.bot.send_message(message.from_user.id,
                                        '‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º',
                                        reply_markup=create_cancel_keyboard('travel'))
            self.bot.register_next_step_handler(msg, self.change_title)
        if len(message.text) > 300:
            msg = self.bot.send_message(message.from_user.id,
                                        '‚ùå –û–≥–æ! –û–ø–∏—Å–∞–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —è —Ç–∞–∫–æ–µ –Ω–µ –∑–∞–ø–æ–º–Ω—é :(\n–ü—Ä–∏–¥—É–º–∞–π –ø–æ–∫–æ—Ä–æ—á–µ',
                                        reply_markup=create_cancel_keyboard('travel'))
            self.bot.register_next_step_handler(msg, self.change_title)
        db_travel.update_travel_parm(message.from_user.id, travel_id, "description", message.text)
        self.handle(f'show`{travel_id}', message.from_user.id, None)

    def change_title(self, message: Message):
        travel_id = user_manager.get_payload(message.from_user.id)
        if message.text is None:
            msg = self.bot.send_message(message.from_user.id,
                                        '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º',
                                        reply_markup=create_cancel_keyboard('travel'))
            self.bot.register_next_step_handler(msg, self.change_title)
        if len(message.text) > 50:
            msg = self.bot.send_message(message.from_user.id,
                                        '‚ùå –û–≥–æ! –ù–∞–∑–≤–∞–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —è —Ç–∞–∫–æ–µ –Ω–µ –∑–∞–ø–æ–º–Ω—é :(\n–ü—Ä–∏–¥—É–º–∞–π –ø–æ–∫–æ—Ä–æ—á–µ',
                                        reply_markup=create_cancel_keyboard('travel'))
            self.bot.register_next_step_handler(msg, self.change_title)
        db_travel.update_travel_parm(message.from_user.id, travel_id, "title", message.text)
        self.handle(f'show`{travel_id}', message.from_user.id, None)

    def select_locate(self, message: Message):
        splited = message.text.split(',')
        if len(splited) < 2:
            msg = self.bot.send_message(message.from_user.id,
                                        '‚ùå –ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –∏ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–µ—Ö–∞—Ç—å\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –†–æ—Å—Å–∏—è, –ú–æ—Å–∫–≤–∞',
                                        reply_markup=create_cancel_keyboard('travel'))
            self.bot.register_next_step_handler(msg, self.select_locate)
            return
        country_name = osm_manager.get_country(splited[0].strip())
        if country_name is None:
            msg = self.bot.send_message(message.from_user.id,
                                        '‚ùå –ù–∞ —Å–≤–æ–∏—Ö –∫–∞—Ä—Ç–∞—Ö —è –Ω–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã\n\n–ù–∞–ø–æ–º–∏–Ω–∞—é, —Ñ–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∞–∫–æ–π: –°—Ç—Ä–∞–Ω–∞, –≥–æ—Ä–æ–¥\n–ù–∞–ø—Ä–∏–º–µ—Ä: –†–æ—Å—Å–∏—è, –ú–æ—Å–∫–≤–∞',
                                        reply_markup=create_cancel_keyboard('travel'))
            self.bot.register_next_step_handler(msg, self.select_locate)
            return
        city_name = osm_manager.get_city(splited[1].strip(), country_name[0])
        if city_name is None:
            msg = self.bot.send_message(message.from_user.id,
                                        '‚ùå –í —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ —è –Ω–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞\n–ù–∞–ø–æ–º–∏–Ω–∞—é, —Ñ–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∞–∫–æ–π: –°—Ç—Ä–∞–Ω–∞, –≥–æ—Ä–æ–¥. –ù–∞–ø—Ä–∏–º–µ—Ä: –†–æ—Å—Å–∏—è, –ú–æ—Å–∫–≤–∞',
                                        reply_markup=create_cancel_keyboard('travel'))
            self.bot.register_next_step_handler(msg, self.select_locate)
            return
        travel_id = user_manager.get_payload(message.from_user.id)
        location_id = db_locations.create_location(travel_id, f'{country_name[0]}, {city_name[0]}', city_name[1])
        is_first = ''
        if location_id == 1:
            is_first = ' –ø–µ—Ä–≤–∞—è'
        msg = self.bot.send_message(message.from_user.id,
                                    f"–°—É–ø–µ—Ä,{is_first} —Ç–æ—á–∫–∞ –≤ —Ç–≤–æ—ë–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –¥–∞—Ç—ã, –∫–æ–≥–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏–µ—Ö–∞—Ç—å —Å—é–¥–∞ –∏ —É–µ—Ö–∞—Ç—å –æ—Ç—Å—é–¥–∞\n\n–î–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \"–î–ï–ù–¨_–ó–ê–ï–ó–î–ê.–ú–ï–°–Ø–¶.–ì–û–î-–î–ï–ù–¨_–í–´–ï–ó–î–ê.–ú–ï–°–Ø–¶.–ì–û–î\"\n–ù–∞–ø—Ä–∏–º–µ—Ä\n\"16.06.2024-20.06.2024\"\n–ï—Å–ª–∏ –ø—Ä–∏–µ–∑–∂–∞–µ—à—å –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å, —Ç–æ –Ω–∞–ø–∏—à–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n\"–î–ï–ù–¨_–ó–ê–ï–ó–î–ê.–ú–ï–°–Ø–¶.–ì–û–î\"",
                                    reply_markup=create_cancel_keyboard('travel'))
        self.bot.register_next_step_handler(msg, self.select_data)
        user_manager.set_payload(message.from_user.id, f"{travel_id}`{location_id}")

    def _data_not_correct(self, id, is_update):
        msg = self.bot.send_message(id,
                                    f"‚ùå –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–µ –≤–µ—Ä–Ω—ã–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π —à–∞–±–ª–æ–Ω—É\n\n–î–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \"–î–ï–ù–¨_–ó–ê–ï–ó–î–ê.–ú–ï–°–Ø–¶.–ì–û–î-–î–ï–ù–¨_–í–´–ï–ó–î–ê.–ú–ï–°–Ø–¶.–ì–û–î\", –Ω–∞–ø—Ä–∏–º–µ—Ä \"16.06.2024-20.06.2024\". –ï—Å–ª–∏ –ø—Ä–∏–µ–∑–∂–∞–µ—à—å –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å, —Ç–æ –Ω–∞–ø–∏—à–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"–î–ï–ù–¨_–ó–ê–ï–ó–î–ê.–ú–ï–°–Ø–¶.–ì–û–î\"",
                                    reply_markup=create_cancel_keyboard('travel'))
        if not is_update:
            self.bot.register_next_step_handler(msg, self.select_data)
        else:
            self.bot.register_next_step_handler(msg, self.update_data)

    def _check_data(self, id, text, is_update=False):
        location_id = 0
        if is_update:
            location_id = int(user_manager.get_payload(id).split('`')[1])
        nodes = text.split('.')
        if len(nodes) != 3:
            self._data_not_correct(id, is_update)
            return False
        if not (is_int(nodes[0]) and is_int(nodes[1]) and is_int(nodes[2])):
            self._data_not_correct(id, is_update)
            return False
        day = int(nodes[0])
        month = int(nodes[1])
        year = int(nodes[2])

        if month > 12 or month < 1:
            self._data_not_correct(id, is_update)
            return False
        if day > 31 or day < 1:
            self._data_not_correct(id, is_update)
            return False
        if year < 2024:
            self._data_not_correct(id, is_update)
            return False
        try:
            d = date(year, month, day)
        except:
            self._data_not_correct(id, is_update)
            return False
        unixtime = time.mktime(d.timetuple())
        unix_time_now = time.mktime(d.today().timetuple())
        if unix_time_now > unixtime:
            msg = self.bot.send_message(id,
                                        f"‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–µ–¥—à–µ–º –≤—Ä–µ–º–µ–Ω–∏\n\n–î–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \"–î–ï–ù–¨_–ó–ê–ï–ó–î–ê.–ú–ï–°–Ø–¶.–ì–û–î-–î–ï–ù–¨_–í–´–ï–ó–î–ê.–ú–ï–°–Ø–¶.–ì–û–î\", –Ω–∞–ø—Ä–∏–º–µ—Ä \"16.06.2024-20.06.2024\". –ï—Å–ª–∏ –ø—Ä–∏–µ–∑–∂–∞–µ—à—å –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å, —Ç–æ –Ω–∞–ø–∏—à–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"–î–ï–ù–¨_–ó–ê–ï–ó–î–ê.–ú–ï–°–Ø–¶.–ì–û–î\"",
                                        reply_markup=create_cancel_keyboard('travel'))
            if not is_update:
                self.bot.register_next_step_handler(msg, self.select_data)
            else:
                self.bot.register_next_step_handler(msg, self.update_data)

            return False
        if not db_locations.data_is_empty(user_manager.get_payload(id).split('`')[0], unixtime, location_id):
            msg = self.bot.send_message(id,
                                        f"‚ùå –î–∞—Ç–∞ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –¥—Ä—É–≥–æ–π –¥–∞—Ç–æ–π –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è\n\n–î–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \"–î–ï–ù–¨_–ó–ê–ï–ó–î–ê.–ú–ï–°–Ø–¶.–ì–û–î-–î–ï–ù–¨_–í–´–ï–ó–î–ê.–ú–ï–°–Ø–¶.–ì–û–î\", –Ω–∞–ø—Ä–∏–º–µ—Ä \"16.06.2024-20.06.2024\". –ï—Å–ª–∏ –ø—Ä–∏–µ–∑–∂–∞–µ—à—å –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å, —Ç–æ –Ω–∞–ø–∏—à–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"–î–ï–ù–¨_–ó–ê–ï–ó–î–ê.–ú–ï–°–Ø–¶.–ì–û–î\"",
                                        reply_markup=create_cancel_keyboard('travel'))
            if not is_update:
                self.bot.register_next_step_handler(msg, self.select_data)
            else:
                self.bot.register_next_step_handler(msg, self.update_data)
            return False
        return True

    def _check_two_data(self, id, data1, data2, is_update=False):
        if not (self._check_data(id, data1, is_update) and self._check_data(id, data2, is_update)):
            return False
        location_id = 0
        if is_update:
            location_id = int(user_manager.get_payload(id).split('`')[1])
        data1 = date(int(data1.split('.')[2]), int(data1.split('.')[1]), int(data1.split('.')[0]))
        data2 = date(int(data2.split('.')[2]), int(data2.split('.')[1]), int(data2.split('.')[0]))
        if not db_locations.data_is_empty_interval(user_manager.get_payload(id).split('`')[0],
                                                   time.mktime(data1.timetuple()), time.mktime(data2.timetuple()),
                                                   location_id):
            msg = self.bot.send_message(id,
                                        f"‚ùå –î–∞—Ç–∞ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –¥—Ä—É–≥–æ–π –¥–∞—Ç–æ–π –∏–∑ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è\n\n–î–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \"–î–ï–ù–¨_–ó–ê–ï–ó–î–ê.–ú–ï–°–Ø–¶.–ì–û–î-–î–ï–ù–¨_–í–´–ï–ó–î–ê.–ú–ï–°–Ø–¶.–ì–û–î\", –Ω–∞–ø—Ä–∏–º–µ—Ä \"16.06.2024-20.06.2024\". –ï—Å–ª–∏ –ø—Ä–∏–µ–∑–∂–∞–µ—à—å –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å, —Ç–æ –Ω–∞–ø–∏—à–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"–î–ï–ù–¨_–ó–ê–ï–ó–î–ê.–ú–ï–°–Ø–¶.–ì–û–î\"",
                                        reply_markup=create_cancel_keyboard('travel'))
            if not is_update:
                self.bot.register_next_step_handler(msg, self.select_data)
            else:
                self.bot.register_next_step_handler(msg, self.update_data)

            return False
        if time.mktime(data1.timetuple()) > time.mktime(data2.timetuple()):
            msg = self.bot.send_message(id,
                                        f"‚ùå –î–∞—Ç–∞ –ø—Ä–∏–µ–∑–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –≤—ã–µ–∑–¥–∞\n\n–î–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \"–î–ï–ù–¨_–ó–ê–ï–ó–î–ê.–ú–ï–°–Ø–¶.–ì–û–î-–î–ï–ù–¨_–í–´–ï–ó–î–ê.–ú–ï–°–Ø–¶.–ì–û–î\", –Ω–∞–ø—Ä–∏–º–µ—Ä \"16.06.2024-20.06.2024\". –ï—Å–ª–∏ –ø—Ä–∏–µ–∑–∂–∞–µ—à—å –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å, —Ç–æ –Ω–∞–ø–∏—à–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"–î–ï–ù–¨_–ó–ê–ï–ó–î–ê.–ú–ï–°–Ø–¶.–ì–û–î\"",
                                        reply_markup=create_cancel_keyboard('travel'))
            if not is_update:
                self.bot.register_next_step_handler(msg, self.select_data)
            else:
                self.bot.register_next_step_handler(msg, self.update_data)

            return False
        return True

    def select_data(self, message: Message):
        text = message.text.replace("\"", "").strip()
        payload = user_manager.get_payload(message.from_user.id).split('`')

        location_good = False
        if len(text.split('-')) == 1:
            if self._check_data(message.from_user.id, text):
                db_locations.update_param(payload[0], payload[1], 'start_date', f'{text}')
                location_good = True
        else:
            splited = text.split('-')
            if self._check_two_data(message.from_user.id, splited[0], splited[1]):
                db_locations.update_param(payload[0], payload[1], 'start_date', f'{splited[0]}')
                db_locations.update_param(payload[0], payload[1], 'end_date', f'{splited[1]}')
                location_good = True
        if location_good:
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(
                types.InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é', callback_data='travel_addlocation`' + payload[0]))
            markup_inline.add(
                types.InlineKeyboardButton(text='üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', callback_data='travel_show`' + payload[0]))
            self.bot.send_message(message.from_user.id, "‚úÖ –õ–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?",
                                  reply_markup=markup_inline)
