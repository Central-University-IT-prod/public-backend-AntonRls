import requests
import telebot
from telebot import types
from telebot.types import Message
import utils
from DB import db_user, db_places
from OSM import osm_manager
from Keyboards import send_menu


class main_greetings_scenariy:

    def __init__(self, bot: telebot.TeleBot):
        self.bot = bot

    def start(self, message: Message):
        self.bot.clear_step_handler_by_chat_id(message.from_user.id)
        self.bot.send_message(message.from_user.id, 'üëã –ü—Ä–∏–≤–µ—Ç! –Ø - —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º. –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è')
        age_message = self.bot.send_message(message.from_user.id,
                                            '–î–ª—è –Ω–∞—á–∞–ª–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç. –î–∞–≤–∞–π —Ç–æ–ª—å–∫–æ —á–µ—Å—Ç–Ω–æ ;)üëá')
        self.bot.register_next_step_handler(age_message, self.select_age)

    def select_age(self, message: Message):
        age_text = message.text
        if not utils.is_int(age_text):
            age_message = self.bot.send_message(message.from_user.id,
                                                '‚ùå –ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —Ç—ã –æ—à–∏–±—Å—è :(\n–í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º üëá')
            self.bot.register_next_step_handler(age_message, self.select_age)
            return
        age = int(message.text)
        message_dop = ''
        if age < 18:
            message_dop = '–û–≥–æ, –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π('
        else:
            message_dop = '–û—Ç–ª–∏—á–Ω–æ, —Ö–æ—Ä–æ—à–∏–π –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π!'

        db_user.update_param_from_userid('Users', 'age', message.text, message.from_user.id, False)
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button_geo = types.KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ª–æ–∫–∞—Ü–∏–µ–π", request_location=True)
        keyboard.add(button_geo)
        country_message = self.bot.send_message(message.from_user.id,
                                                f'‚úÖ {message_dop}\n\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å—Ç—Ä–∞–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –∂–∏–≤—ë—à—å',
                                                reply_markup=keyboard)
        self.bot.register_next_step_handler(country_message, self.select_country)

    def address_not_found(self, id):
        self.bot.send_message(id, 'üòï –ê–¥—Ä–µ—Å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –≤—Ä—É—á–Ω—É—é')

    def select_country(self, message: Message):

        if message.location is None:
            country = osm_manager.get_country(message.text)
            if country is None:
                country_message = self.bot.send_message(message.from_user.id,
                                                        f'‚ùå –£–ø—Å, —è –Ω–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∫–∞—Ä—Ç–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑')
                self.bot.register_next_step_handler(country_message, self.select_country)
                return

            select_city_msg = self.bot.send_message(message.from_user.id,
                                                    f'‚úÖ {country[0]} - –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞! –ê —Å–µ–π—á–∞—Å —Ä–∞—Å—Å–∫–∞–∂–∏ –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –∂–∏–≤—ë—à—å',
                                                    reply_markup=types.ReplyKeyboardRemove())
            self.bot.register_next_step_handler(select_city_msg, self.select_city)

            db_places.add_place(message.from_user.id, country[1])
            db_user.update_param_from_userid('Users', 'country', country[0], message.from_user.id, True)
        else:
            try:
                locate = str(message.location.longitude) + ',' + str(message.location.latitude)

                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36'}

                info = requests.get('https://geocode-maps.yandex.ru/1.x/?apikey=636227ad-a114-4068-a821-47bb4cdc2ff2&format=json&geocode=' + locate, headers=headers)

                if len(info.json()['response']['GeoObjectCollection']['featureMember']) > 0:

                    country_name = ''
                    city_name = ''
                    components = \
                        info.json()['response']['GeoObjectCollection']['featureMember'][0]['GeoObject'][
                            'metaDataProperty'][
                            'GeocoderMetaData']['Address']['Components']
                    for adress in components:

                        if adress['kind'] == 'country':
                            country_name = adress['name']
                        elif adress['kind'] == 'locality':
                            city_name = adress['name']

                    country = osm_manager.get_country(country_name)

                    if country is None:
                        self.address_not_found(message.chat.id)
                        return
                    city = osm_manager.get_city(city_name, country[0])
                    if city is None:
                        self.address_not_found(message.chat.id)
                        return
                    db_places.add_place(message.chat.id, country[1])
                    db_user.update_param_from_userid('Users', 'country', country[0], message.chat.id, True)
                    db_user.update_param_from_userid('Users', 'city', city[0], message.chat.id, True)
                    db_user.update_param_from_userid('Places', 'city_id', city[1], message.chat.id, False)

                    msg = self.bot.send_message(message.from_user.id,
                                                f"‚úÖ –õ–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞!\n<b>{country[0]}, {city[0]}</b>\n\nüìù –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ: –Ω–∞–ø–∏—à–∏ –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Å–µ–±–µ, —ç—Ç–æ –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è",
                                                parse_mode='html', reply_markup=types.ReplyKeyboardRemove())
                    self.bot.register_next_step_handler(msg, self.select_bio)
                else:
                    self.address_not_found(message.chat.id)
            except:
                self.address_not_found(message.chat.id)


    def select_city(self, message: Message):

        city = osm_manager.get_city(message.text,
                                    db_user.get_value_from_user_id('Users', message.from_user.id, 'country'))
        if city is None:
            select_city_msg = self.bot.send_message(message.from_user.id,
                                                    f'‚ùå –û–≥–æ, —è –Ω–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –≤ —Ç–≤–æ–µ–π —Å—Ç—Ä–∞–Ω–µ üò≥. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑')
            self.bot.register_next_step_handler(select_city_msg, self.select_city)
            return
        bio_msg = self.bot.send_message(message.from_user.id,
                                        f'‚úÖ –ü—Ä–∏–Ω—è—Ç–æ!\nüìù –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ: –Ω–∞–ø–∏—à–∏ –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Å–µ–±–µ, —ç—Ç–æ –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è')
        self.bot.register_next_step_handler(bio_msg, self.select_bio)

        db_user.update_param_from_userid('Users', 'city', city[0], message.from_user.id, True)
        db_user.update_param_from_userid('Places', 'city_id', city[1], message.from_user.id, False)

    def select_bio(self, message: Message):
        if message.text is None:
            bio_msg = self.bot.send_message(message.from_user.id,
                                            '‚ùå –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º :(\n–ü–æ–ø—Ä–æ–±—É–π —Å–æ—Å—Ç–∞–≤–∏—Ç—å –±—É–∫–≤–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è, –∏ –ø—Ä–∏—Å–ª–∞—Ç—å –µ–≥–æ –º–Ω–µ –µ—â—ë —Ä–∞–∑')
            self.bot.register_next_step_handler(bio_msg, self.select_bio)
            return
        if len(message.text) == 0:
            bio_msg = self.bot.send_message(message.from_user.id,
                                            '‚ùå –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º :(\n–ü–æ–ø—Ä–æ–±—É–π —Å–æ—Å—Ç–∞–≤–∏—Ç—å –±—É–∫–≤–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è, –∏ –ø—Ä–∏—Å–ª–∞—Ç—å –µ–≥–æ –º–Ω–µ –µ—â—ë —Ä–∞–∑')
            self.bot.register_next_step_handler(bio_msg, self.select_bio)
            return
        if len(message.text) > 500:
            bio_msg = self.bot.send_message(message.from_user.id,
                                            '‚ùå –£–ø—Å, –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ üò¨. –ü–æ–ø—Ä–æ–±—É–π —É–º–µ–Ω—å—à–∏—Ç—å –µ–≥–æ –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –µ—â—ë —Ä–∞–∑')
            self.bot.register_next_step_handler(bio_msg, self.select_bio)
            return
        db_user.update_param_from_userid('Users', 'bio', message.text, message.from_user.id, True)
        send_menu(self.bot, message.from_user.id,
                  'üî• –û–æ–æ–æ–æ—Ç–ª–∏—á–Ω–æ! –†–∞–¥ –Ω–∞—à–µ–º—É –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É! –î–∞–≤–∞–π –Ω–µ–º–Ω–æ–≥–æ —Ä–∞—Å—Å–∫–∞–∂—É –ø—Ä–æ —Å–µ–±—è\n\nüìñ –Ø —É–º–µ—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è. –ö–∞–∫ —ç—Ç–æ? –í—Å—ë –ø—Ä–æ—Å—Ç–æ - —Ç—ã –≤–Ω–æ—Å–∏—à—å –ª–æ–∫–∞—Ü–∏–∏, –¥–∞—Ç—ã –ø–æ—Å–µ—â–µ–Ω–∏—è –º–µ—Å—Ç, –∞ —è –¥–µ–ª–∞—é –≤—Å—é —Ä–∞–±–æ—Ç—É: —Å–æ—Å—Ç–∞–≤–ª—è—é –º–∞—Ä—à—Ä—É—Ç, –Ω–∞—Ö–æ–∂—É –∫–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã, —É–∑–Ω–∞—é –ø–æ–≥–æ–¥—É, –∞ –µ—â—ë —è –º–æ–≥—É –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –≤ –≤–∞—à–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ! –Ø –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω—ã–π –∏ –≤—Å–µ –º–æ–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å. –ë—É–¥—É –Ω–∞–¥–µ—è—Ç—å—Å—è, —á—Ç–æ –Ω–µ –ø–æ—Ç–µ—Ä—è–µ—à—å—Å—è :)')
